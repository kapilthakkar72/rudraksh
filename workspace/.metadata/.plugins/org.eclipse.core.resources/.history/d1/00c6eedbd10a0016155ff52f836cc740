package languageModel;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

public class ReadLmProb {
	public HashMap<String, Double> lmProb = new HashMap<>();
	public HashMap<String, Double> uniSyDicProb = new HashMap<>();
	public HashMap<String, ArrayList<String>> phraseMap = new HashMap<>();

	public void loadWord() throws IOException {
		String infile = "/home/kapil/Downloads/rudraksh-master/TweetNormalisation/baseline_code/twitterLM/twitterLM.txt";
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(infile), "utf-8"));

		String line = "";
		int switches = 0;
		while ((line = br.readLine()) != null) {
			if (line.startsWith("ngram")) {
				// System.out.println(line);
			}
			if (line.equals("\\1-grams:")) {
				switches = 1;
				continue;
			}
			if (line.equals("\\2-grams:")) {
				switches = 1;
				continue;
			}
			if (line.equals("\\3-grams:")) {
				switches = 1;
				continue;
			}
			if (line.equals("\\4-grams:")) {
				switches = 1;
				continue;
			}
			if (line.equals("\\end\\")) {
				switches = 0;
				continue;
			}
			if (line.length() == 0)
				continue;
			String parts[] = line.split("\t");
			if (switches == 1)
				if (lmProb.containsKey(parts[1].toLowerCase())) {
					lmProb.put(parts[1].toLowerCase(),
							Double.parseDouble(parts[0]) + lmProb.get(parts[1].toLowerCase()));
				} else
					lmProb.put(parts[1].toLowerCase(), Double.parseDouble(parts[0]));
		}
		br.close();
		// Iterator<HashMap.Entry<String, Double>> i =
		// lmProb.entrySet().iterator();
		// while(i.hasNext()){
		// String key = i.next().getKey();
		// System.out.println(key+", "+lmProb.get(key));
		// }

	}

	public void loadSyllablesUni() throws IOException {
		uniSyDicProb = loadlmProb("./data/uniSyDicLmProb.txt");
		// uniSyCorpusProb=loadlmProb("./data/LM/uniSyCorpusLmProb.txt");
	}

	public HashMap<String, Double> loadlmProb(String infile) throws IOException {
		HashMap<String, Double> tmp = new HashMap<>();
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(infile), "utf-8"));

		String line = "";
		while ((line = br.readLine()) != null) {
			String parts[] = line.split(",");
			tmp.put(parts[0], Double.parseDouble(parts[1]));
		}
		br.close();
		return tmp;
	}

	public class lminfo implements Comparable {
		public String word;
		public double prob;

		public lminfo(String _word, double _prob) {
			word = _word;
			prob = _prob;
		}

		@Override
		public int compareTo(Object o) {
			if (prob == ((lminfo) o).prob)
				return 0;
			return (prob < ((lminfo) o).prob) ? 1 : -1;
		}

	}

	public void phraseGen() throws IOException {

		for (String token : lmProb.keySet()) {
			if (token.contains("<"))
				continue;
			if (token.split(" ").length == 1)
				continue;
			ArrayList<String> phrase1Short = new ArrayList<>();
			String abbrPhrase = "";
			String phrase[] = token.split(" ");
			for (int i = 0; i < phrase.length; i++)
				abbrPhrase += phrase[i].charAt(0);
			if (phraseMap.containsKey(abbrPhrase))
				phrase1Short = phraseMap.get(abbrPhrase);
			phrase1Short.add(token.replace(" ", "&") + "@0@0");
			phraseMap.put(abbrPhrase, phrase1Short);
		}
	}

	public static void main(String args[]) throws IOException {
		ReadLmProb rl = new ReadLmProb();
		rl.loadWord();
		System.out.println("#");
		System.out.println(rl.lmProb.get("a good homerun"));
		System.out.println(rl.lmProb.get("uhhm no punc"));
		System.out.println(rl.lmProb.get("uhhm no punc"));
		System.out.println(rl.lmProb.get("betsy are on"));
		System.out.println(rl.lmProb.get("with old girl"));

	}
}
